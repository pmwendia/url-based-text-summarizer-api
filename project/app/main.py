# import logging

# from fastapi import FastAPI

# from app.api import ping, summaries
# from app.db import init_db

# log = logging.getLogger("uvicorn")


# def create_application() -> FastAPI:
#     application = FastAPI()
#     application.include_router(ping.router)
#     application.include_router(
#         summaries.router, prefix="/summaries", tags=["summaries"]
#     )

#     return application


# app = create_application()


# @app.on_event("startup")
# async def startup_event():
#     log.info("Starting up...")
#     init_db(app)


# @app.on_event("shutdown")
# async def shutdown_event():
#     log.info("Shutting down...")
import logging
from fastapi import FastAPI, Request, Form
from fastapi.templating import Jinja2Templates
from app.api import ping, summaries
from app.db import init_db
from fastapi.responses import HTMLResponse

log = logging.getLogger("uvicorn")

def create_application() -> FastAPI:
    application = FastAPI()
    application.include_router(ping.router)
    application.include_router(
        summaries.router, prefix="/summaries", tags=["summaries"]
    )
    return application

app = create_application()

templates = Jinja2Templates(directory="./templates")  # Specify the directory where your HTML templates are located

@app.on_event("startup")
async def startup_event():
    log.info("Starting up...")
    init_db(app)

@app.on_event("shutdown")
async def shutdown_event():
    log.info("Shutting down...")

@app.get("/", response_class=HTMLResponse)
async def show_form(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/")
async def submit_form(url: str = Form(...)):
    # Generate the summary based on the provided URL
    # You can insert this data into your database or perform other operations here

    # For demonstration, we'll just return the URL as a confirmation
    return {"url": url, "summary": "Summary will be generated by the app"}
